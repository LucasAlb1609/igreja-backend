# Generated by Django 5.2.7 on 2025-10-15 22:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ModeloDocumento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Ex: Declaração de Membro, Certificado de Batismo', max_length=100, verbose_name='Nome do Documento')),
                ('arquivo_template', models.CharField(help_text="Ex: certificados/declaracao_membro.html. O caminho é relativo à pasta 'templates' do app.", max_length=200, verbose_name='Caminho do Arquivo de Template')),
                ('papeis_permitidos', models.CharField(help_text='Separe os papéis por vírgula. Ex: membro,secretario. Papéis disponíveis: congregado, membro, secretario.', max_length=100, verbose_name='Papéis Permitidos')),
            ],
            options={
                'verbose_name': 'Modelo de Documento',
                'verbose_name_plural': 'Modelos de Documentos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome_completo', models.CharField(max_length=200, verbose_name='Nome Completo')),
                ('foto_perfil', models.ImageField(blank=True, null=True, upload_to='perfil_fotos/', verbose_name='Foto do Perfil')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('nome_pai', models.CharField(blank=True, max_length=200, verbose_name='Nome do Pai')),
                ('nome_mae', models.CharField(blank=True, max_length=200, verbose_name='Nome da Mãe')),
                ('cpf', models.CharField(blank=True, max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='CPF deve conter 11 dígitos, sem pontos ou traços.', regex='^\\d{11}$')], verbose_name='CPF')),
                ('rg', models.CharField(blank=True, max_length=20, verbose_name='RG')),
                ('naturalidade', models.CharField(blank=True, max_length=150, verbose_name='Natural da cidade de')),
                ('estado_civil', models.CharField(blank=True, choices=[('solteiro', 'Solteiro(a)'), ('casado', 'Casado(a)'), ('divorciado', 'Divorciado(a)'), ('viuvo', 'Viúvo(a)')], max_length=20, verbose_name='Estado Civil')),
                ('nome_conjuge', models.CharField(blank=True, max_length=200, verbose_name='Nome do Cônjuge')),
                ('data_casamento', models.DateField(blank=True, null=True, verbose_name='Data de Casamento')),
                ('tem_alergia_medicacao', models.BooleanField(default=False, verbose_name='Possui alguma alergia?')),
                ('alergias_texto', models.TextField(blank=True, verbose_name='Quais alergias?')),
                ('telefone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato: (XX) XXXX-XXXX ou (XX) XXXXX-XXXX', regex='^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$')], verbose_name='Telefone')),
                ('endereco', models.CharField(blank=True, max_length=300, verbose_name='Endereço')),
                ('bairro', models.CharField(blank=True, max_length=100, verbose_name='Bairro')),
                ('cidade', models.CharField(blank=True, max_length=100, verbose_name='Cidade')),
                ('cep', models.CharField(blank=True, max_length=10, verbose_name='CEP')),
                ('profissao', models.CharField(blank=True, max_length=150, verbose_name='Profissão')),
                ('nivel_escolar', models.CharField(blank=True, choices=[('fundamental_incompleto', 'Ensino Fundamental Incompleto'), ('fundamental_completo', 'Ensino Fundamental Completo'), ('medio_incompleto', 'Ensino Médio Incompleto'), ('medio_completo', 'Ensino Médio Completo'), ('superior_incompleto', 'Ensino Superior Incompleto'), ('superior_completo', 'Ensino Superior Completo'), ('pos_graduacao', 'Pós-graduação'), ('nao_informar', 'Não desejo informar')], max_length=30, verbose_name='Nível Escolar')),
                ('data_conversao', models.DateField(blank=True, null=True, verbose_name='Data de Conversão')),
                ('batizado_aguas', models.BooleanField(default=False, verbose_name='É batizado nas águas?')),
                ('data_batismo', models.DateField(blank=True, null=True, verbose_name='Data do Batismo')),
                ('local_batismo', models.CharField(blank=True, choices=[('2ibca', 'Na 2ª IBCA'), ('outra', 'Em Outra Igreja')], max_length=10, verbose_name='Onde foi o batismo?')),
                ('outra_igreja_batismo', models.CharField(blank=True, help_text='Nome da igreja onde foi batizado', max_length=200, verbose_name='Qual igreja?')),
                ('recebido_por_aclamacao', models.BooleanField(default=False, verbose_name='Foi recebido por aclamação na 2ª IBCA?')),
                ('membro_congregacao', models.BooleanField(default=False, verbose_name='É membro de alguma congregação?')),
                ('qual_congregacao', models.CharField(blank=True, help_text='Preencher apenas se for membro de congregação', max_length=150, verbose_name='Qual Congregação?')),
                ('frequenta_escola_biblica', models.BooleanField(default=False, verbose_name='Frequenta alguma classe da Escola Bíblica?')),
                ('qual_classe_escola_biblica', models.CharField(blank=True, help_text='Preencher apenas se frequenta a Escola Bíblica', max_length=100, verbose_name='Qual classe?')),
                ('deseja_exercer_funcao', models.BooleanField(default=False, verbose_name='Deseja exercer alguma função na 2ª IBCA?')),
                ('qual_funcao_deseja', models.TextField(blank=True, verbose_name='Qual função ou ministério?')),
                ('papel', models.CharField(choices=[('congregado', 'Congregado'), ('membro', 'Membro'), ('secretario', 'Secretário')], default='congregado', max_length=20, verbose_name='Papel no Sistema')),
                ('data_cadastro', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data de Cadastro')),
                ('ativo', models.BooleanField(default=True, verbose_name='Usuário Ativo')),
                ('aprovado', models.BooleanField(default=False, verbose_name='Cadastro Aprovado')),
                ('data_aprovacao', models.DateTimeField(blank=True, null=True, verbose_name='Data de Aprovação')),
                ('aprovado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usuarios_aprovados', to=settings.AUTH_USER_MODEL, verbose_name='Aprovado por')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['nome_completo'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Filho',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_completo', models.CharField(max_length=200, verbose_name='Nome do Filho(a)')),
                ('data_nascimento', models.DateField(verbose_name='Data de Nascimento')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filhos', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Filho',
                'verbose_name_plural': 'Filhos',
                'ordering': ['data_nascimento'],
            },
        ),
    ]
